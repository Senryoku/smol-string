const l = "", V = typeof window < "u" && window.Blob && new Blob([atob(l)], { type: "text/javascript;charset=utf-8" });
function d() {
  let U;
  try {
    if (U = V && (window.URL || window.webkitURL).createObjectURL(V), !U)
      throw "";
    return new Worker(U);
  } catch {
    return new Worker("data:application/javascript;base64," + l, { type: "module" });
  } finally {
    U && (window.URL || window.webkitURL).revokeObjectURL(U);
  }
}
const R = new d();
let J = 0;
const F = {};
R.onmessage = function(U) {
  console.log("onmessage", U);
  const Q = U.data.id;
  F[Q](U.data.data), delete F[Q];
};
async function W(U) {
  const Q = J++;
  return console.log("compress", Q), new Promise((B) => {
    F[Q] = B, R.postMessage({ command: "compress", id: Q, data: U });
  });
}
async function Z(U) {
  const Q = J++;
  return console.log("decompress", Q), new Promise((B) => {
    F[Q] = B, R.postMessage({ command: "decompress", id: Q, data: U });
  });
}
export {
  W as compress,
  Z as decompress
};
