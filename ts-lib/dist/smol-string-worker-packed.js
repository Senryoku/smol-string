const l = "", J = typeof window < "u" && window.Blob && new Blob([atob(l)], { type: "text/javascript;charset=utf-8" });
function d() {
  let U;
  try {
    if (U = J && (window.URL || window.webkitURL).createObjectURL(J), !U)
      throw "";
    return new Worker(U);
  } catch {
    return new Worker("data:application/javascript;base64," + l, { type: "module" });
  } finally {
    U && (window.URL || window.webkitURL).revokeObjectURL(U);
  }
}
const R = new d();
let Z = 0;
const Q = {};
R.onmessage = function(U) {
  const F = U.data.id;
  Q[F](U.data.data), delete Q[F];
};
async function V(U) {
  const F = Z++;
  return new Promise((B) => {
    Q[F] = B, R.postMessage({ command: "compress", id: F, data: U });
  });
}
async function W(U) {
  const F = Z++;
  return new Promise((B) => {
    Q[F] = B, R.postMessage({ command: "decompress", id: F, data: U });
  });
}
export {
  V as compressPacked,
  W as decompressPacked
};
