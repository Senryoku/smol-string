const J = "", V = typeof window < "u" && window.Blob && new Blob([atob(J)], { type: "text/javascript;charset=utf-8" });
function S() {
  let U;
  try {
    if (U = V && (window.URL || window.webkitURL).createObjectURL(V), !U)
      throw "";
    return new Worker(U);
  } catch {
    return new Worker("data:application/javascript;base64," + J, { type: "module" });
  } finally {
    U && (window.URL || window.webkitURL).revokeObjectURL(U);
  }
}
const R = new S();
let l = 0;
const F = {};
R.onmessage = function(U) {
  console.log("onmessage", U);
  const Q = U.data.id;
  F[Q](U.data.data), delete F[Q];
};
async function d(U) {
  const Q = l++;
  return console.log("compress", Q), new Promise((B) => {
    F[Q] = B, R.postMessage({ command: "compress", id: Q, data: U });
  });
}
async function W(U) {
  const Q = l++;
  return console.log("decompress", Q), new Promise((B) => {
    F[Q] = B, R.postMessage({ command: "decompress", id: Q, data: U });
  });
}
export {
  d as compress,
  W as decompress
};
