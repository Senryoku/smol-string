const J = "KGFzeW5jKCk9PntmdW5jdGlvbiBrKEEsQyl7Y29uc3QgST1uZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoQSksZz1DLmFsbG9jVWludDgoSS5sZW5ndGgpO3JldHVybiBuZXcgVWludDhBcnJheShDLm1lbW9yeS5idWZmZXIsZyxJLmxlbmd0aCkuc2V0KEkpLHtwdHI6ZyxsZW5ndGg6SS5sZW5ndGh9fWZ1bmN0aW9uIGUoQSl7Y29uc3QgQz1uZXcgQXJyYXkoQS5sZW5ndGgpO2ZvcihsZXQgST0wO0k8QS5sZW5ndGg7SSsrKUNbSV09U3RyaW5nLmZyb21DaGFyQ29kZShBW0ldKTtyZXR1cm4gQy5qb2luKCIiKX1mdW5jdGlvbiB3KEEsQyl7Y29uc3QgST1uZXcgVWludDMyQXJyYXkoQS5idWZmZXIuc2xpY2UoQyxDKzgpKSxnPUkuYXQoMCksUT1JLmF0KDEpO3JldHVybntzdGFydDpDLWcsZW5kOkMsY2FwYWNpdHk6UX19dmFyIEo9YXN5bmMoQT17fSxDKT0+e2xldCBJO2lmKEMuc3RhcnRzV2l0aCgiZGF0YToiKSl7Y29uc3QgZz1DLnJlcGxhY2UoL15kYXRhOi4qP2Jhc2U2NCwvLCIiKTtsZXQgUTtpZih0eXBlb2YgQnVmZmVyPT0iZnVuY3Rpb24iJiZ0eXBlb2YgQnVmZmVyLmZyb209PSJmdW5jdGlvbiIpUT1CdWZmZXIuZnJvbShnLCJiYXNlNjQiKTtlbHNlIGlmKHR5cGVvZiBhdG9iPT0iZnVuY3Rpb24iKXtjb25zdCBFPWF0b2IoZyk7UT1uZXcgVWludDhBcnJheShFLmxlbmd0aCk7Zm9yKGxldCBpPTA7aTxFLmxlbmd0aDtpKyspUVtpXT1FLmNoYXJDb2RlQXQoaSl9ZWxzZSB0aHJvdyBuZXcgRXJyb3IoIkZhaWxlZCB0byBkZWNvZGUgYmFzZTY0LWVuY29kZWQgZGF0YSBVUkwsIEJ1ZmZlciBhbmQgYXRvYiBhcmUgbm90IHN1cHBvcnRlZCIpO0k9YXdhaXQgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoUSxBKX1lbHNle2NvbnN0IGc9YXdhaXQgZmV0Y2goQyksUT1nLmhlYWRlcnMuZ2V0KCJDb250ZW50LVR5cGUiKXx8IiI7aWYoImluc3RhbnRpYXRlU3RyZWFtaW5nImluIFdlYkFzc2VtYmx5JiZRLnN0YXJ0c1dpdGgoImFwcGxpY2F0aW9uL3dhc20iKSlJPWF3YWl0IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGcsQSk7ZWxzZXtjb25zdCBFPWF3YWl0IGcuYXJyYXlCdWZmZXIoKTtJPWF3YWl0IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKEUsQSl9fXJldHVybiBJLmluc3RhbmNlfSxjPUE9PkooQSwiZGF0YTphcHBsaWNhdGlvbi93YXNtO2Jhc2U2NCxBR0Z6YlFFQUFBQUJWZzFnQkg5L2YzOEJmMkFGZjM5L2YzOEFZQVovZjM5L2YzOEJmMkFCZndGL1lBTi9mMzhBWUFKL2Z3QmdBbjkvQVg5Z0FYOEFZQVIvZjM5L0FHQUNmMzhCZm1BRGYzOS9BWDlnQlg5K2ZuNStBR0FCZlFGOUF5UWpBd1FEQlFRREJnWUhCUWdKQUFZR0JnY0VDZ0FFQkFZS0NBVUVBQUlCQkFzTUNnb0VCUUZ3QVFRRUJRTUJBQkVHRGdKL0FVR0FnTUFBQzM4QVFRQUxCMUFHQm0xbGJXOXllUUlBQ21Gc2JHOWpWV2x1ZERnQUFBdGhiR3h2WTFWcGJuUXhOZ0FDQkdaeVpXVUFBdzVqYjIxd2NtVnpjMUJoWTJ0bFpBQU5FR1JsWTI5dGNISmxjM05RWVdOclpXUUFFZ2tKQVFCQkFRc0RHeHdkQ3MxREkxNEJBWDhqZ0lDQWdBQkJFR3NpQVNTQWdJQ0FBQ0FCSTRHQWdJQUFRWmlBd0lBQWFpa0RBRGNEQUNBQlFRaHFJQUVnQUJDQmdJQ0FBQUpBSUFFdkFRd05BQ0FCS0FJSUlRQWdBVUVRYWlTQWdJQ0FBQ0FBRHdzRGZ3QU1BQXNMY1FJQmZ3RitJNENBZ0lBQVFSQnJJZ01rZ0lDQWdBQkNnSUNBZ0JBaEJBSkFRUUZGRFFBQ1FDQUNEUUJDLy8vLy93OGhCQXdCQ3lBQktBSUFJQUpCQUVFQUlBRW9BZ1FvQWdBUmdJQ0FnQUFBSWdKRnJVSWdoaUFDcllRaEJBc2dBQ0FFTndJQUlBTkJFR29rZ0lDQWdBQUxoZ0VDQW44QmZpT0FnSUNBQUVFUWF5SUJKSUNBZ0lBQUlBRWdBRUVBU0RvQURDT0JnSUNBQUNFQ0FrQWdBRUYvVEEwQUFrQUNRQ0FBUVFGMElnQU5BRUYrSVFBTUFRc2dBa0dZZ01DQUFHb3BBd0FpQTZjZ0FFRUJRUUFnQTBJZ2lLY29BZ0FSZ0lDQWdBQUFJZ0JGRFFFTElBRkJFR29rZ0lDQWdBQWdBQThMQTM4QURBQUxDeGtBSTRHQWdJQUFRWmlBd0lBQWFpQUFJQUVRaElDQWdBQUxPQUVCZndKQUlBSkJBQ0FDR3lJRFJRMEFJQUFvQWdBZ0FVR3ExYXJWZWlBQ0d5QURRUUJCQUNBQUtBSUVLQUlJRVlHQWdJQUFBQXNMUVFFQ2Z3SkFJQUFnQUNnQ0JFRUJhaENHZ0lDQUFDSUJRZi8vQTNFTkFDQUFJQUFvQWdRaUFrRUJhallDQkNBQUtBSUFJQUpCQTNScVFnQTNBd0FMSUFFTExRRUNmMEVBSVFJQ1FDQUFLQUlJSWdNZ0FVOE5BQ0FBSUFNZ0FSQ1BnSUNBQUJDT2dJQ0FBQ0VDQ3lBQ0M0RUNBd0YvQVg0Q2Z3SkFJQUF0QUJ3aUFrRVVUdzBBSUFBb0FoaEJnQUpxUVg4Z0FuUkJmM05KRFFBZ0FDQUNRUUZxSWdJNkFCd0xJQUd0UXYvL1A0TWhBd04vQWtBQ1FBSkFBa0FnQWtIL0FYRWlCRVVOQUNBQUxRQWRJZ0ZCd0FCR0RRRU1Bd3NnQUNBQUtBSVVRUUZxTmdJVUlBQWdBQ2dDR0VFQmFqWUNHRUVBSVFFTUFRc2dBQkNGZ0lDQUFDSUJRZi8vQTNFTkFFRUFJUUVnQUVFQU9nQWREQUVMSUFFUEN5QUFLQUlFUVFOMElBQW9BZ0JxUVhocUlnVWdCU2tEQUNBRFFRQWdBbXRCUDNHdGhpQUJyWWlFTndNQUlBQWdBQzBBSFNBRVFjQUFJQUZyUWY4QmNTSUJJQVFnQVVrYklnRnFPZ0FkSUFJZ0FXc2hBZ3dBQ3dzUEFDQUFJQUJCREdvUWlZQ0FnQUFMWlFFRGZ3SkFJQUFvQWdBaUFrVU5BQUpBSUFKQmRHb2lBMEVJYWlnQ0FFRU5iRUVQYWtGOGNTSUNRUUFnQWhzaUJFVU5BQ0FCS0FJQUlBTkJCQ0FDR3lBRVFRSkJBQ0FCS0FJRUtBSUlFWUdBZ0lBQUFBc2dBRUVBTmdJSUlBQkJBRFlDQUFzTGdRTUVCSDhCZmdSL0FYNGpnSUNBZ0FCQkVHc2lCQ1NBZ0lDQUFDT0JnSUNBQUNFRklBRW9BZ0FoQmdKQUFrQWdBU2dDQkEwQUlBVkJnSURBZ0FCcUlRY01BUXNnQWlBREVJdUFnSUFBSVFnQ1FBSkFJQVlOQUVFQUlRVkJmeUVKREFFTElBWkJmR29vQWdBaUJVRi9haUVKQ3lBR1FYaHFJUW9nQ1NBSXAzRWhBU0FJUWptSXB5RUxBMEFqZ1lDQWdBQkJnSURBZ0FCcUlRY2dCaUFCYWl3QUFDSU1SUTBCSUFWRkRRRUNRQ0FNUVg5S0RRQWdDeUFNUWY4QWNVY05BQ0FDSUFNZ0NpZ0NBQ0FCUVFOMGFpSU1LQUlBSUF3b0FnUVFqSUNBZ0FCQkFYRkZEUUFnQkVFQk9nQU1JQVFnQVRZQ0NDQUVRUWhxSVFjTUFnc2dCVUYvYWlFRklBRkJBV29nQ1hFaEFRd0FDd3NDUUFKQUlBY3RBQVFOQUVJQUlRaENBQ0VOREFFTElBUWdCa0YwYWlnQ0FDQUhLQUlBUVFKMGFpSUJRUUpxTFFBQVFROXhPZ0FDSUFRZ0FTOEJBRHNCQUNBRU13RUFJQVF4QUFKQ0VJYUVJUWhDZ0lDQWdCQWhEUXNnQUNBTklBaUVOd0lBSUFSQkVHb2tnSUNBZ0FBTDdBVUZBbjhCZmdGL0FuNENmeU9BZ0lDQUFFSGdBR3NpQWlTQWdJQ0FBQUpBQWtBQ1FBSkFBa0FnQVVFUVN3MEFJQUZCQTAwTkFTQUFOUUFBUWlDR0lBQWdBVUVCZGtIOC8vLy9CM0VpQTJvMUFBQ0VJUVFnQUNBQlFYeHFJZ1ZxTlFBQVFpQ0dJQUFnQlNBRGEybzFBQUNFSVFaQ3JKcmkwNlBTOFBvZklRY01CQXRCQUNFRFFxeWE0dE9qMHZENkh5RUhRUUFoQlNBQlFUQkpEUUpCQUNFRlFxeWE0dE9qMHZENkh5RUhRcXlhNHRPajB2RDZIeUVFUXF5YTR0T2owdkQ2SHlFR0EwQWdCVUV3YWlJSUlBRlBEUUlnQWtIQUFHb2dBQ0FGYWlJRktRQUlJQWFGUWdBZ0JTa0FBRUxiMGRDRm10cmZnV2VGUWdBUW40Q0FnQUFnQWtFd2FpQUZRUmhxS1FBQUlBU0ZRZ0FnQlVFUWFpa0FBRUxqamFQa2lkNmEzbzUvaFVJQUVKK0FnSUFBSUFKQklHb2dCVUVvYWlrQUFDQUhoVUlBSUFWQklHb3BBQUJDdzVuZHFjZTUyY3pZQUlWQ0FCQ2ZnSUNBQUNBQ1FjQUFha0VJYWlrREFDQUNLUU5BaFNFR0lBSkJJR3BCQ0dvcEF3QWdBaWtESUlVaEJ5QUNRVEJxUVFocUtRTUFJQUlwQXpDRklRUWdDQ0VGREFBTEMwSUFJUVpDckpyaTA2UFM4UG9mSVFjQ1FDQUJEUUJDQUNFRURBTUxJQUFnQVVFQmRtb3hBQUJDQ0lZZ0FERUFBRUlRaG9RZ0FTQUFha0YvYWpFQUFJUWhCQXdDQ3lBRUlBZUZJQWFGSVFjTElBQWdCV29oQ1NBQklBVnJJUWdDUUFOQUlBTkJFR29pQlNBSVR3MEJJQUpCMEFCcUlBa2dBMm9pQTBFSWFpa0FBQ0FIaFVJQUlBTXBBQUJDMjlIUWhacmEzNEZuaFVJQUVKK0FnSUFBSUFKQjBBQnFRUWhxS1FNQUlBSXBBMUNGSVFjZ0JTRUREQUFMQ3lBQklBQnFJZ05CZUdvcEFBQWhCaUFEUVhCcUtRQUFJUVFMSUFKQkVHb2dCRUxiMGRDRm10cmZnV2VGUWdBZ0JpQUhoVUlBRUorQWdJQUFJQUlnQWtFUWFrRUlhaWtEQUVMYjBkQ0ZtdHJmZ1dlRlFnQWdBYTBnQWlrREVJVkNyOGoxeGNlc2g3dWdmNFZDQUJDZmdJQ0FBQ0FDUVFocUtRTUFJUWNnQWlrREFDRUVJQUpCNEFCcUpJQ0FnSUFBSUFjZ0JJVUxXQUVDZjBFQUlRUUNRQ0FCSUFOSERRQUNRQ0FBSUFKSERRQkJBUThMQTBBZ0FVVWhCQ0FCUlEwQklBRkJmMm9oQVNBQ0xRQUFJUU1nQUMwQUFDRUZJQUJCQVdvaEFDQUNRUUZxSVFJZ0JTQURSZzBBQ3dzZ0JBdi9FUVlEZndGK0JuOEJmZ0Y5Q1g4amdJQ0FnQUJCc0FKcklnSWtnSUNBZ0FBQ1FBSkFBa0FDUUFKQUlBRU5BQ0FDUVFrN0FaUUNJQUpDQURjQ2pBSWdBa0VBTmdLQUFpQUNRcXJWcXRVS053TDRBU0FDSTRHQWdJQUFRWmlBd0lBQWFpa0RBRGNDaEFJQ1FDQUNRZmdCYWhDRmdJQ0FBQ0lEUWYvL0EzRU5BQ0FDUWNBQWFrRVlhaUFDUWZnQmFrRVlhaWtDQURjREFDQUNRY0FBYWtFUWFpQUNRZmdCYWtFUWFpa0NBRGNEQUNBQ1FjQUFha0VJYWlBQ1FmZ0Jha0VJYWlrQ0FEY0RBQ0FDSUFJcEF2Z0JOd05BQ3lBQ1FTQnFRUWhxSUFKQndBQnFRUWhxS1FNQU53TUFJQUpCSUdwQkVHb2dBa0hBQUdwQkVHb3BBd0EzQXdBZ0FrRWdha0VZYWlBQ1FjQUFha0VZYWlrREFEY0RBQ0FDSUFJcEEwQTNBeUFNQVF0QkFDRUVJQUpCNEFCcVFRaHFRUUEyQWdBZ0FrSUFOd05nSUFJamdZQ0FnQUJCbUlEQWdBQnFLUU1BSWdVM0Ftd2dBa0g0QVdwQkNHcEJBRFlDQUNBQ1FnQTNBL2dCSUFGQmdJREFBQ0FCUVlDQXdBQkpHMEhrQUd4QjBBQnVJUVlnQWtIc0FHb2hCMEVCSVFNQ1FFRUFEUUJCZkNFSUFrQkNBVUVnSUFabmE2MUMvLzhEZzRhbklnUkJDQ0FFUVFoTEd5SUdRUTlxSWdrZ0JrRURkR29pQ2lBR1FRSjBha0Y4Y1NJTFJRMEFRUUFoQkNBRnB5QUxRUUpCQUNBRlFpQ0lweWdDQUJHQWdJQ0FBQUFpQ0VVTkFRc2dDQ0FHTmdJSUlBZ2dDQ0FKUVh4eGFqWUNCQ0FJSUFnZ0NrRjhjV28yQWdBZ0FpQUlRUXhxSWdnMkF2Z0JRUUFoQXlBSVFRQWdCaENoZ0lDQUFCb2dBa0g0QVdwQkNHb2lDQ0FHUWRBQWJFSGtBRzRpQkRZQ0FDQUNRZUFBYWtFSWFpSUdLQUlBSVFrZ0JpQUVOZ0lBSUFnZ0NUWUNBQ0FDUVFBMkFtUWdBaWtEWUNFTUlBSWdBaWtEK0FFM0EyQWdBaUFNTndQNEFVRUJJUVFMSUFKQitBRnFJQWNRaVlDQWdBQWdCQTBCSUFKQjRBQnFFSWlBZ0lBQUMwRUFJUWdnQTBILy93TnhSUTBCREFJTElBSWdCVGNDcUFJZ0FrRUFOZ0trQWlBQ1FxclZxdFVLTndLY0FnSkFBa0FnQWJOREFBQ0FQNUlRb0lDQWdBQWlEVU1BQUlCUFhTQU5Rd0FBQUFCZ2NVVU5BQ0FOcVNFSURBRUxRUUFoQ0FzQ1FBSkFJQUpCbkFKcUlBaEJGQ0FJUVJSSkd5QUJiRUhBQUdwQkJuWVFqb0NBZ0FCQi8vOERjUTBBSUFKQitBRnFRUkJxSWdnZ0FrR2NBbXBCRUdvb0FnQTJBZ0FnQWtINEFXcEJDR29pQXlBQ1Fad0Nha0VJYWlrQ0FEY0RBQ0FDSUFJcEFwd0NOd1A0QVNBQ1FRazdBWlFDSUFKQ0FEY0NqQUlnQWtINEFXb1FoWUNBZ0FCQi8vOERjUTBBSUFKQitBQnFRUmhxSUFKQitBRnFRUmhxS1FNQU53TUFJQUpCK0FCcVFSQnFJQWdwQXdBM0F3QWdBa0g0QUdwQkNHb2dBeWtEQURjREFDQUNJQUlwQS9nQk53TjRJQUlvQW1BaUNrRjBhaUVPSUFwQmVHb2hEeUFLUVh4cUlSQkJnQUloRVNBQ0tBSm9JUklnQWlnQ1pDRVRRUUFoQXdOQUlBQWdBMm9oQjBFQ0lRZ0NRQUpBQTBBZ0F5QUlhaUlKSUFGUERRSWdBa0dZQVdvZ0FrSGdBR29nQnlBSUVJcUFnSUFBQWtBQ1FDQUNMUUNjQVEwQUlBY2dDQkNMZ0lDQUFDRUZBa0FDUUNBS0RRQWdCYWNoQTBFQUlRdEJmeUVVREFFTElCQW9BZ0FpQzBGL2FpSVVJQVduY1NFREN5QUZRam1JcHlFVklBc2hCQUpBQWtBRFFDQUtJQU5xSWhZc0FBQWlCa1VOQVNBRVFRQkdEUUVDUUFKQUlBWkJmMG9OQUNBVklBWkIvd0J4UncwQUlBY2dDQ0FQS0FJQUlBTkJBM1JxSWdZb0FnQWdCaWdDQkJDTWdJQ0FBRUVCY1VVTkFTQU9LQUlBSUFOQkFuUnFJUU1NQkFzZ0N5QVFLQUlBUncwQUlBTWdDeUFHUVFGR0d5RUxDeUFFUVg5cUlRUWdBMEVCYWlBVWNTRUREQUFMQ3lBS0lBdHFJQllnQ3lBUUtBSUFTU0lFR3lBVlFZQUJjam9BQUNBT0tBSUFJUVlnRHlnQ0FDQUxJQU1nQkJzaUEwRURkR29pQkNBSU5nSUVJQVFnQnpZQ0FDQUNJQkpCZjJvaUVqWUNhQ0FDSUJOQkFXb2lFellDWkNBR0lBTkJBblJxSVFNTElBTWdFVHNCQUNBRFFRSnFJQkZCZ0lBOGNVRVFkam9BQUNBSVFRSkhEUUVnQnkwQUFDRUlEQU1MSUFoQkFXb2hDQXdCQ3dzZ0FrR2dBV29nQWtIZ0FHb2dCeUFJUVg5cUVJcUFnSUFBSUFJdkFhQUJJQUl0QUtJQlFSQjBjaUVJQ3lBQ1FmZ0FhaUFJRUllQWdJQUFRZi8vQTNFTkFpQUpRWDlxSVFNZ0VVRUJhaUlSUWYvL1AzRkIvLzgvUncwQklBcEJBQ0FRS0FJQUlnZ1FvWUNBZ0FBYUlBSkJBRFlDWkNBQ0lBaXRRdEFBZmtMa0FJQ25JaEkyQW1nZ0FrSDRBR3BCLy84L0VJZUFnSUFBUWYvL0EzRU5Ba0VBSVJNZ0FrRUFOZ0tRQVNBQ1FRazZBSlFCUVlBQ0lSRU1BUXNMQWtBZ0EwRUJhaUFCU1EwQUlBSkIrQUJxSUFjdEFBQVFoNENBZ0FCQi8vOERjUTBCREFJTElBSkJxQUZxUVJCcUlBSkI0QUJxUVJCcUtBSUFOZ0lBSUFKQnFBRnFRUWhxSUFKQjRBQnFRUWhxS1FNQU53TUFJQUlnQWlrRFlEY0RxQUVnQWtIQUFXb2dBa0dvQVdvZ0J5QUlFSXFBZ0lBQUFrQUNRQUpBSUFJdEFNUUJEUUFnQ0VFQ1J3MEJJQWN0QUFBaENBd0NDeUFDUWZnQWFpQUNMd0hBQVNBQ0xRRENBVUVRZEhJUWg0Q0FnQUJCLy84RGNVVU5Bd3dDQ3lBQ1FjZ0Jha0VRYWlBQ1FlQUFha0VRYWlnQ0FEWUNBQ0FDUWNnQmFrRUlhaUFDUWVBQWFrRUlhaWtEQURjREFDQUNJQUlwQTJBM0E4Z0JJQUpCM0FGcUlBSkJ5QUZxSUFjZ0NFRi9haENLZ0lDQUFDQUNMd0hjQVNBQ0xRRGVBVUVRZEhJaENBc2dBa0g0QUdvZ0NCQ0hnSUNBQUVILy93TnhEUUFnQWtINEFHb2dDU0FBYWtGL2FpMEFBQkNIZ0lDQUFFSC8vd054UlEwQkN5QUNRZUFBYWhDSWdJQ0FBRUVBSVFnTUFnc2dBa0hnQUdvUWlJQ0FnQUFnQWtFZ2FrRVlhaUFDUWZnQWFrRVlhaWtEQURjREFDQUNRU0JxUVJCcUlBSkIrQUJxUVJCcUtRTUFOd01BSUFKQklHcEJDR29nQWtINEFHcEJDR29wQXdBM0F3QWdBaUFDS1FONE53TWdDeUFDUVJocUlBSkJJR3BCR0dvcEF3QTNBd0FnQWtFUWFpQUNRU0JxUVJCcUtRTUFOd01BSUFKQkNHb2dBa0VnYWtFSWFpa0RBRGNEQUNBQ0lBSXBBeUEzQXdCQkFDRUlJQUlnQWlnQ0JDSUJRUUpxRUlhQWdJQUFRZi8vQTNFTkFDQUNLQUlBSWdnZ0FpZ0NCRUVEZEdvaUEwRUlhaUFDTlFJSVFnT0dOd01BSUFNZ0FVRURkQ0lCUVFSeXJVSWdoaUFDTlFJVWhEY0RBQ0FJSUFGcVFRUnFJUWdMSUFKQnNBSnFKSUNBZ0lBQUlBZ0xyUUlEQlg4QmZnRi9JNENBZ0lBQVFSQnJJZ0lrZ0lDQWdBQkJBQ0VEQWtBZ0FDZ0NDQ0lFSUFGUERRQWdBQ2dDQUNFRkFrQWdCRVVOQUNBQ0lBRkIvLy8vL3dGTE9nQUlJQUZCZ0lDQWdBSlBEUUFnQUNnQ0RDQUZJQVJCQTNSQkF5QUJRUU4wUVFBZ0FFRVFhaWdDQUNnQ0JCR0NnSUNBQUFCQkFYRkZEUUFnQUNBQk5nSUlRUUFoQXd3QkN5QUFRUXhxSWdZcEFnQWhCeUFDSUFGQi8vLy8vd0ZMT2dBTUFrQWdBVUdBZ0lDQUFrOE5BQUpBQWtBZ0FVRURkQ0lJRFFCQmVDRUlEQUVMSUFlbklBaEJBMEVBSUFkQ0lJaW5LQUlBRVlDQWdJQUFBQ0lJUlEwQkN5QUlJQUFvQWdBZ0FDZ0NCRUVEZEJDaWdJQ0FBQ0VJSUFZZ0JTQUVFSjZBZ0lBQUlBQWdBVFlDQ0NBQUlBZzJBZ0FNQVF0QkFTRURDeUFDUVJCcUpJQ0FnSUFBSUFNTEpRRUJmd05BUVg4Z0FFRUJkaUFBYWtFSWFpSUNJQUlnQUVrYklnQWdBVWtOQUFzZ0FBcy9BUUYvSTRDQWdJQUFRUkJySWdFa2dJQ0FnQUFnQVNBQUtRSU1Od01JSUFGQkNHb2dBQ2dDQUNBQUtBSUlFSkdBZ0lBQUlBRkJFR29rZ0lDQWdBQUxOd0VCZndKQUlBSkJBM1JCQUNBQ0d5SURSUTBBSUFBb0FnQWdBVUVFSUFJYklBTkJBa0VBSUFBb0FnUW9BZ2dSZ1lDQWdBQUFDd3VEREFNQmZ3RitDMzhqZ0lDQWdBQkIwQUJySWdNa2dJQ0FnQUFnQTBFQU5nSkVJQU5DcXRXcTFRbzNBandnQXlPQmdJQ0FBRUdZZ01DQUFHb3BBd0FpQkRjQ1NBSkFBa0FDUUFKQUlBSU5BRUdxMWFyVmVpRUZRUUFoQmd3QkMwR3ExYXJWZWlFRklBSWhCaUFEUWNnQWFpSUhRYXJWcXRWNlFRQWdBaENUZ0lDQUFFRUJjUTBBSUFOQktHb2dCeUFDRUpTQWdJQUFJQU12QVRBTkFTQURLQUlzSVFZZ0F5Z0NLQ0VGQzBFSklRaEJBQ0VKUVFBaENrRUFJUXRCQUNFTUEwQUNRQUpBQWtBQ1FBSkFJQXdnQWtZTkFDQUlRZjhCY1NJSFFSUkpEUUVNQkFzZ0F5QUVOd01nQWtBQ1FDQURRU0JxSUFVZ0JpQUNFSk9BZ0lBQVFRRnhSUTBBSUFVaENBd0JDeUFEUVR4cUlBTkJJR29nQWhDVWdJQ0FBQ0FETHdGRURRWWdBeWdDUENJSUlBVWdBeWdDUUNJQ1FRSjBFS0tBZ0lBQUdpQURJQVEzQXlnZ0EwRW9haUFGSUFZUWxZQ0FnQUFMQWtBZ0FnMEFRUUFoQ1VHcTFhclZlaUVLUVFBaERBd0NDeUFEUVFBMkFqQWdBMEtxMWFyVkNqY0NLQ0FESUFRM0FqUWdBMEVBUWYvL1B4Q1BnSUNBQUNJSFFmLy8vLzhCU3pvQVBDQUhRWUNBZ0lBQ1R3MENBa0FDUUNBSFFRTjBJZzBOQUVGOElRME1BUXNnQktjZ0RVRUNRUUFnQkVJZ2lLY29BZ0FSZ0lDQWdBQUFJZzFGRFFNTElBTWdCellDTUNBRElBMDJBaWhCQUNFSEFrQURRQ0FIUWZqLy93TkdEUUVnRFNBSGFrSUFOd0lBSUFkQkNHb2hCd3dBQ3dzZ0EwSC8vejgyQWl3Z0F5QUVOd0pJUVFBaEJ5QURRUUEyQWtRZ0EwS3ExYXJWQ2pjQ1BDQURRVHhxSUFKQkdHd1Fsb0NBZ0FCQi8vOERjUTBDSUFNcEFrZ2hCQ0FES0FKRUlRd2dBeWdDUENJS0lBTW9Ba0FpQ1dvZ0NDMEFBRG9BQUNBTklBZ3ZBUUFnQ0VFQ2FpMEFBRUVRZEhKQkEzUnFJZzVCQVRZQ0JDQU9JQW8yQWdBZ0NVRUJhaUVBUVlBQ0lROUJBU0VPQTBBZ0FDRUpBa0FDUUFKQUFrQWdEaUFDVHcwQUFrQWdDQ0FPUVFKMGFpSUFMd0VBSUFCQkFtb3RBQUJCRUhSeUlnQkIvLzgvUncwQUlBNUJBV29pRGlBQ1R3MEJRUUFoQndKQUEwQWdCMEg0Ly84RFJnMEJJQTBnQjJwQ0FEY0NBQ0FIUVFocUlRY01BQXNMQWtBZ0NDQU9RUUowYWlJSEx3RUFJQWRCQW1vdEFBQkJFSFJ5SWdkQmdBSkpEUUFnQTBILy96ODJBaXdNQ1FzZ0NpQUphaUFIT2dBQUlBbEJBV29oQUVHQUFpRVBEQVFMSUFCQmdBSkpEUUVDUUNBTklBQkJBM1JxSWdBb0FnQWlDdzBBSUFvZ0NXb2dDaUFIYWlJQUlBa2dCMnNpQ3hDaWdJQ0FBQm9nQ2lBTElBbHFJZ3RxSUFBdEFBQTZBQUFnQzBFQmFpRUFEQU1MSUFvZ0NXb2dDeUFBS0FJRUlnQVFvb0NBZ0FBYUlBQWdDV29oQUF3Q0N5QURRZi8vUHpZQ0xDQURRU2hxRUpDQWdJQUFEQVVMSUFvZ0NXb2dBRG9BQUNBSlFRRnFJUUFMSUEwZ0QwSC8vejl4UVFOMGFpSUxJQWtnQjJ0QkFXbzJBZ1FnQ3lBS0lBZHFOZ0lBSUE5QkFXb2hEd3NnRGtFQmFpRU9JQWtoQnd3QUN3c2dDQ0FMUVlBQ2FrRi9JQWQwUVg5elQyb2hDQXdDQ3lBRElBUTNBaGdnQXlBS05nSU1JQU1nQ1RZQ0VDQURJQXcyQWhRQ1FBSkFJQXdnQ1VFSWFpSU5TUTBBSUFraEJ3d0JDMEVBSVFjZ0EwRU1haUFNSUEwUWo0Q0FnQUFRbG9DQWdBQkIvLzhEY1EwRklBTW9BZ3doQ2lBREtBSVVJUXdnQXlnQ0VDRUhDeUFLSUFkcUlnY2dDVG9BQUNBSFFRZHFJQXhCR0hZNkFBQWdCMEVHYWlBTVFSQjJPZ0FBSUFkQkJXb2dERUVJZGpvQUFDQUhRUVJxSUF3NkFBQWdCMEVEYWlBSlFSaDJPZ0FBSUFkQkFtb2dDVUVRZGpvQUFDQUhRUUZxSUFsQkNIWTZBQUFnQ2lBSmFpRUhEQVFMSUFOQktHb1FrSUNBZ0FBTUFndEJBQ0VPSUFnaEJ3SkFBMEFnQjBIL0FYRWlEVVVOQVNBQUlBb2dDVUgvQVhGQndBQkdJZzlxSWdwQkEzUnFLUU1BUVFBZ0NTQVBHeUlKUVQ5eHJZWkJBQ0FOUWNBQUlBbHJRZjhCY1NJUElBMGdEMGtiSWcxclFUOXhyWWluSUFjZ0RXc2lCM1FnRG5JaERpQU5JQWxxSVFrTUFBc0xJQVVnREVFQ2RHb2lCeUFPT3dFQUlBZEJBbW9nRGtILy96OXhJZ2RCRUhZNkFBQkJBQ0FMUVFGcUlBZEIvLzgvUmlJSEd5RUxRUWtnQ0NBSEd5RUlJQXhCQVdvaERBd0FDd3RCQUNFSEN5QURRZEFBYWlTQWdJQ0FBQ0FIQzVBQkFRSi9JNENBZ0lBQVFSQnJJZ1FrZ0lDQWdBQUNRQUpBSUFNTkFDQUVJQUFwQWdBM0F3QWdCQ0FCSUFJUWxZQ0FnQUJCQVNFRkRBRUxRUUFoQlNBQ1JRMEFJQVFnQTBILy8vLy9BMHM2QUF3Z0EwR0FnSUNBQkU4TkFDQUFLQUlBSUFFZ0FrRUNkRUVDSUFOQkFuUkJBQ0FBS0FJRUtBSUVFWUtBZ0lBQUFDRUZDeUFFUVJCcUpJQ0FnSUFBSUFVTHdRRUNBWDhCZmlPQWdJQ0FBRUVnYXlJREpJQ0FnSUFBSUFFcEFnQWhCQ0FESUFKQi8vLy8vd05MT2dBY0FrQUNRQ0FDUVlDQWdJQUVUdzBBQWtBQ1FDQUNRUUowSWdFTkFFRjhJUUVNQVFzZ0JLY2dBVUVDUVFBZ0JFSWdpS2NvQWdBUmdJQ0FnQUFBSWdGRkRRRUxJQU1nQWpZQ0ZDQURJQUUyQWhBZ0EwRUFPd0VZSUFOQkVHb2hBZ3dCQ3lBRFFRRTdBUXdnQTBFRWFpRUNDeUFBSUFJcEFnQTNBZ0FnQUVFSWFpQUNRUWhxS0FJQU5nSUFJQU5CSUdva2dJQ0FnQUFMTndFQmZ3SkFJQUpCQW5SQkFDQUNHeUlEUlEwQUlBQW9BZ0FnQVVFRUlBSWJJQU5CQWtFQUlBQW9BZ1FvQWdnUmdZQ0FnQUFBQ3d2YUFRRUZmeU9BZ0lDQUFFRWdheUlDSklDQWdJQUFRUUFoQXdKQUlBQW9BZ2dpQkNBQlR3MEFJQUFvQWdBaEJRSkFBa0FnQkVVTkFFRUFEUUFnQUNnQ0RDQUZJQVJCQUNBQlFRQWdBRUVRYWlnQ0FDZ0NCQkdDZ0lDQUFBQkJBWEZGRFFBZ0FDQUJOZ0lJREFFTElBSWdBRUVNYWlJR0tRSUFOd01RSUFKQkdHb2dBa0VRYWlBQkVJR0FnSUFBSUFJdkFSd2lBdzBCSUFJb0FoZ2dBQ2dDQUNBQUtBSUVFS0tBZ0lBQUlRTWdCaUFGSUFRUWhJQ0FnQUFnQUNBQk5nSUlJQUFnQXpZQ0FBdEJBQ0VEQ3lBQ1FTQnFKSUNBZ0lBQUlBTUwwZ0lEQm44QmZnZC9JNENBZ0lBQVFSQnJJZ01rZ0lDQWdBQWdBQ2dDQkNFRUlBQW9BZ0FoQlVFQUlRWWdBa0gvQVhFaEJ3Ti9Ba0FDUUFKQUlBWWdCRWNOQUVGL0lRZ01BUXNDUUNBRklBWkJCSFJxSWdKQkNHb3BBd0FpQ1VJQVV3MEFJQUlwQXdCN0lBbDdmS2NnQVVrTkFnc2dCa0VIZENJSVFZQUJhaUVLQTBBZ0NDQUtUdzBDSUFnZ0FDa0NBQ0lKUWhtSXAwR0FmM0VpQWlBSUlBSkxHeUlMSUFocklRd2dDYWRCQ0NBSlFpQ0lweHNoRFNBSVFSQjBhQ0VPUVFBaEFnSkFBMEFDUUNBTUlBSkhEUUFnQ3lFUERBSUxRZjhCSUFnZ0Ftb2lEMEVIY1NJUVFRZHpka0VCSUJCMGNTQU5JQTlCQTNacUxRQUFjVVVOQVNBQ1FRRnFJZ0lnQVVrTkFDQU9JQWRKRFFBTElBTWdDVGNEQ0NBRFFRaHFJQWdnQVVFQUVKaUFnSUFBREFJTElBOUJBV29oQ0F3QUN3c2dBMEVRYWlTQWdJQ0FBQ0FJRHdzZ0JrRUJhaUVHREFBTEMxUUJBWDhnQTBFQmNTRUVBa0FEUUNBQ1JRMEJJQUFvQWdCQkNDQUFLQUlFR3lBQlFRTjJhaUlESUFNdEFBQkJmaUFCUVFkeElnTjNjU0FFSUFOMGNqb0FBQ0FCUVFGcUlRRWdBa0YvYWlFQ0RBQUxDd3ZiQVFFRGZ5T0FnSUNBQUVFUWF5SUNKSUNBZ0lBQUFrQWdBRUdBRUU4TkFDT0JnSUNBQUVHb2dNQ0FBR29nQUNBQlFZQVFJQUZCZ0JCSkd5QUFheENhZ0lDQUFBc0NRQ0FCUVlBUVRRMEFBa0FqZ1lDQWdBQkJvSURBZ0FCcUtBSUVEUUFqZ1lDQWdBQkJvSURBZ0FCcUlnTkJnQ0EyQWdRZ0F5QUJRWDlxSWdGQkVIUWlCRFlDQUNBRVFRQkJnSUFFRUtHQWdJQUFHZ3NnQWlPQmdJQ0FBRUdnZ01DQUFHb3BBd0EzQXdnZ0FrRUlhaUFBUVlBUUlBQkJnQkJMR3lJQVFZQndhaUFCSUFCckVKcUFnSUFBQ3lBQ1FSQnFKSUNBZ0lBQUN6c0JBWDhqZ0lDQWdBQkJFR3NpQXlTQWdJQ0FBQ0FESUFBcEFnQTNBd2dnQTBFSWFpQUJJQUpCQVJDWWdJQ0FBQ0FEUVJCcUpJQ0FnSUFBQzcwQkFRUi9RUUFoQkFKQUlBRkJnWUI4VHcwQUFrQWpnWUNBZ0FCQnFJREFnQUJxSUFGQi8vOERha0VRZGlJQklBSVFsNENBZ0FBaUJFRi9SdzBBQWtBamdZQ0FnQUJCb0lEQWdBQnFJQUVnQWhDWGdJQ0FBQ0lFUVg5R0RRQWdCRUdBRUdvaEJBd0JDMEVBSVFSQkFTQUNkQ0lGUHdBaUJrRVFkQ0lDYWtGL2FrRUFJQVZyY1NJRklBSnJRUkIySWdjZ0FXcEFBRUVCU0EwQklBY2dCbW9oQkNBRklBSkdEUUFnQmlBRUVKbUFnSUFBQ3lBRVFSQjBJUVFMSUFRTFR3RUJmd0pBSUFKQi8vOERhaUlHUVlDQWZIRWdCRThpQWtVTkFDQUVRZi8vQTJwQkVIWWlCQ0FHUVJCMklnWkdEUUFnQkNBQlFmLy9BMnBCRUhZaUFXb2dBU0FHYWhDWmdJQ0FBQXNnQWdzaEFDQUJRZi8vQTJwQkVIWWlBU0FCSUFKQi8vOERha0VRZG1vUW1ZQ0FnQUFMTndFQmZ3SkFJQUpCQTNSQkFDQUNHeUlEUlEwQUlBQW9BZ0FnQVVFSUlBSWJJQU5CQTBFQUlBQW9BZ1FvQWdnUmdZQ0FnQUFBQ3d0MUFRRitJQUFnQkNBQmZpQUNJQU4rZkNBRFFpQ0lJZ0lnQVVJZ2lDSUVmbndnQTBMLy8vLy9ENE1pQXlBQlF2Ly8vLzhQZ3lJQmZpSUZRaUNJSUFNZ0JINThJZ05DSUloOElBTkMvLy8vL3crRElBSWdBWDU4SWdGQ0lJaDhOd01JSUFBZ0FVSWdoaUFGUXYvLy8vOFBnNFEzQXdBTG5nSUNBbjhDZlFKQUFrQUNRQ0FBdkNJQlFZQ0FnQVJPRFFCREFBREFmME1BQUlEL0lBRkIvLy8vL3dkeElnSWJJUU1nQVVFQVNBMENJQUpGRFFJZ0FFTUFBQUJNbEx3aEFVSG9maUVDREFFTElBQWhBeUFCUWYvLy8vc0hTdzBCUVlGL0lRSkRBQUFBQUNFRElBRkJnSUNBL0FOR0RRRUxJQUZCamZhckFtb2lBVUgvLy84RGNVSHppZFQ1QTJxK1F3QUFnTCtTSWdBZ0FDQUFRd0FBQUQrVWxDSURrN3hCZ0dCeHZpSUVRd0N3dUQrVUlBQWdCSk1nQTVNZ0FDQUFRd0FBQUVDU2xTSUFJQU1nQUNBQWxDSUFJQUFnQUpRaUFFUHU2WkUrbEVPcXFpby9rcFFnQUNBQVF5YWVlRDZVUXhQT3pENlNsSktTbEpJaUFFTUFzTGcvbENBQUlBU1NROVNhT0xtVWtwSWdBaUFCUVJkMmFyS1NJUU1MSUFNTExBRUJmd0pBSUFKRkRRQWdBQ0VEQTBBZ0F5QUJPZ0FBSUFOQkFXb2hBeUFDUVg5cUlnSU5BQXNMSUFBTFFnRUJmd0pBSUFKRkRRQWdBa0YvYWlFQ0lBQWhBd05BSUFNZ0FTMEFBRG9BQUNBQ1JRMEJJQUpCZjJvaEFpQUJRUUZxSVFFZ0EwRUJhaUVEREFBTEN5QUFDd3RCQWdCQmdJREFBQXNJQUFBQUFBQUFBQUFBUVlpQXdBQUxLQUVBQUFBQ0FBQUFBd0FBQUFBQUFBQUFBQUFBQ0FBUUFLcXFxcW9BQUFBQU1BQVFBQkFBQUFBPSIpO2NvbnN0IGg9YXdhaXQgYygpLEI9aC5leHBvcnRzO2Z1bmN0aW9uIEcoQSl7Y29uc3R7cHRyOkMsbGVuZ3RoOkl9PWsoQSxCKSxnPUIuY29tcHJlc3NQYWNrZWQoQyxJKTtCLmZyZWUoQyxJKTtjb25zdHtzdGFydDpRLGVuZDpFLGNhcGFjaXR5Oml9PXcoQi5tZW1vcnksZyksYT1uZXcgVWludDE2QXJyYXkoQi5tZW1vcnkuYnVmZmVyLnNsaWNlKFEsRSkpLG89ZShhKTtyZXR1cm4gQi5mcmVlKFEsaSksb31mdW5jdGlvbiBuKEEpe2NvbnN0IEM9KEEuY2hhckNvZGVBdChBLmxlbmd0aC0xKTw8MTYpK0EuY2hhckNvZGVBdChBLmxlbmd0aC0yKTtsZXQgST1CLmFsbG9jVWludDE2KEEubGVuZ3RoLTIpLGc9bmV3IFVpbnQxNkFycmF5KEIubWVtb3J5LmJ1ZmZlcixJLEEubGVuZ3RoLTIpO2ZvcihsZXQgRD0wO0Q8QS5sZW5ndGgtMjtEKyspZ1tEXT1BLmNoYXJDb2RlQXQoRCk7Y29uc3QgUT1CLmRlY29tcHJlc3NQYWNrZWQoSSxBLmxlbmd0aC0yLEMpO0IuZnJlZShJLDIqKEEubGVuZ3RoLTIpKTtjb25zdHtzdGFydDpFLGVuZDppLGNhcGFjaXR5OmF9PXcoQi5tZW1vcnksUSksbz1uZXcgVWludDhBcnJheShCLm1lbW9yeS5idWZmZXIuc2xpY2UoRSxpKSksdD1uZXcgVGV4dERlY29kZXIoKS5kZWNvZGUobyk7cmV0dXJuIEIuZnJlZShFLGEpLHR9c2VsZi5vbm1lc3NhZ2U9ZnVuY3Rpb24oQSl7Y29uc3R7Y29tbWFuZDpDLGlkOkksZGF0YTpnfT1BLmRhdGE7c3dpdGNoKEMpe2Nhc2UiZGVjb21wcmVzcyI6e3NlbGYucG9zdE1lc3NhZ2Uoe2lkOkksZGF0YTpuKGcpfSk7YnJlYWt9Y2FzZSJjb21wcmVzcyI6e3NlbGYucG9zdE1lc3NhZ2Uoe2lkOkksZGF0YTpHKGcpfSk7YnJlYWt9fX19KSgpOw==", l = typeof window < "u" && window.Blob && new Blob([atob(J)], { type: "text/javascript;charset=utf-8" });
function V() {
  let U;
  try {
    if (U = l && (window.URL || window.webkitURL).createObjectURL(l), !U)
      throw "";
    return new Worker(U);
  } catch {
    return new Worker("data:application/javascript;base64," + J, { type: "module" });
  } finally {
    U && (window.URL || window.webkitURL).revokeObjectURL(U);
  }
}
const R = new V();
let d = 0;
const F = {};
R.onmessage = function(U) {
  const Q = U.data.id;
  F[Q](U.data.data), delete F[Q];
};
async function W(U) {
  const Q = d++;
  return new Promise((B) => {
    F[Q] = B, R.postMessage({ command: "compress", id: Q, data: U });
  });
}
async function Z(U) {
  const Q = d++;
  return new Promise((B) => {
    F[Q] = B, R.postMessage({ command: "decompress", id: Q, data: U });
  });
}
export {
  W as compressPacked,
  Z as decompressPacked
};
