const V = "", J = typeof window < "u" && window.Blob && new Blob([atob(V)], { type: "text/javascript;charset=utf-8" });
function S() {
  let U;
  try {
    if (U = J && (window.URL || window.webkitURL).createObjectURL(J), !U)
      throw "";
    return new Worker(U);
  } catch {
    return new Worker("data:application/javascript;base64," + V, { type: "module" });
  } finally {
    U && (window.URL || window.webkitURL).revokeObjectURL(U);
  }
}
const R = new S();
let l = 0;
const Q = {};
R.onmessage = function(U) {
  console.log("onmessage", U);
  const F = U.data.id;
  Q[F](U.data.data), delete Q[F];
};
async function W(U) {
  const F = l++;
  return console.log("compress", F), new Promise((B) => {
    Q[F] = B, R.postMessage({ command: "compress", id: F, data: U });
  });
}
async function Z(U) {
  const F = l++;
  return console.log("decompress", F), new Promise((B) => {
    Q[F] = B, R.postMessage({ command: "decompress", id: F, data: U });
  });
}
export {
  W as compress,
  Z as decompress
};
