const J = "", l = typeof window < "u" && window.Blob && new Blob([atob(J)], { type: "text/javascript;charset=utf-8" });
function W() {
  let U;
  try {
    if (U = l && (window.URL || window.webkitURL).createObjectURL(l), !U)
      throw "";
    return new Worker(U);
  } catch {
    return new Worker("data:application/javascript;base64," + J, { type: "module" });
  } finally {
    U && (window.URL || window.webkitURL).revokeObjectURL(U);
  }
}
const R = new W();
let d = 0;
const Q = {};
R.onmessage = function(U) {
  const F = U.data.id;
  Q[F](U.data.data), delete Q[F];
};
async function V(U) {
  const F = d++;
  return new Promise((B) => {
    Q[F] = B, R.postMessage({ command: "compress", id: F, data: U });
  });
}
async function Z(U) {
  const F = d++;
  return new Promise((B) => {
    Q[F] = B, R.postMessage({ command: "decompress", id: F, data: U });
  });
}
export {
  V as compressPacked,
  Z as decompressPacked
};
