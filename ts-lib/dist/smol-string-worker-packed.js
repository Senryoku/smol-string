const l = "", J = typeof window < "u" && window.Blob && new Blob([atob(l)], { type: "text/javascript;charset=utf-8" });
function S() {
  let U;
  try {
    if (U = J && (window.URL || window.webkitURL).createObjectURL(J), !U)
      throw "";
    return new Worker(U);
  } catch {
    return new Worker("data:application/javascript;base64," + l, { type: "module" });
  } finally {
    U && (window.URL || window.webkitURL).revokeObjectURL(U);
  }
}
const R = new S();
let V = 0;
const Q = {};
R.onmessage = function(U) {
  console.log("onmessage", U);
  const F = U.data.id;
  Q[F](U.data.data), delete Q[F];
};
async function d(U) {
  const F = V++;
  return console.log("compress", F), new Promise((B) => {
    Q[F] = B, R.postMessage({ command: "compress", id: F, data: U });
  });
}
async function W(U) {
  const F = V++;
  return console.log("decompress", F), new Promise((B) => {
    Q[F] = B, R.postMessage({ command: "decompress", id: F, data: U });
  });
}
export {
  d as compress,
  W as decompress
};
