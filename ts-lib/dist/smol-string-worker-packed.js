const l = "", V = typeof window < "u" && window.Blob && new Blob([atob(l)], { type: "text/javascript;charset=utf-8" });
function S() {
  let U;
  try {
    if (U = V && (window.URL || window.webkitURL).createObjectURL(V), !U)
      throw "";
    return new Worker(U);
  } catch {
    return new Worker("data:application/javascript;base64," + l, { type: "module" });
  } finally {
    U && (window.URL || window.webkitURL).revokeObjectURL(U);
  }
}
const R = new S();
let J = 0;
const Q = {};
R.onmessage = function(U) {
  console.log("onmessage", U);
  const F = U.data.id;
  Q[F](U.data.data), delete Q[F];
};
async function Z(U) {
  const F = J++;
  return console.log("compress", F), new Promise((B) => {
    Q[F] = B, R.postMessage({ command: "compress", id: F, data: U });
  });
}
async function d(U) {
  const F = J++;
  return console.log("decompress", F), new Promise((B) => {
    Q[F] = B, R.postMessage({ command: "decompress", id: F, data: U });
  });
}
export {
  Z as compress,
  d as decompress
};
