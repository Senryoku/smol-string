const d = "", l = typeof window < "u" && window.Blob && new Blob([atob(d)], { type: "text/javascript;charset=utf-8" });
function Z() {
  let U;
  try {
    if (U = l && (window.URL || window.webkitURL).createObjectURL(l), !U)
      throw "";
    return new Worker(U);
  } catch {
    return new Worker("data:application/javascript;base64," + d, { type: "module" });
  } finally {
    U && (window.URL || window.webkitURL).revokeObjectURL(U);
  }
}
const R = new Z();
let J = 0;
const F = {};
R.onmessage = function(U) {
  const Q = U.data.id;
  F[Q](U.data.data), delete F[Q];
};
async function W(U) {
  const Q = J++;
  return new Promise((B) => {
    F[Q] = B, R.postMessage({ command: "compress", id: Q, data: U });
  });
}
async function V(U) {
  const Q = J++;
  return new Promise((B) => {
    F[Q] = B, R.postMessage({ command: "decompress", id: Q, data: U });
  });
}
export {
  W as compress,
  V as decompress
};
