const J = "", V = typeof window < "u" && window.Blob && new Blob([atob(J)], { type: "text/javascript;charset=utf-8" });
function d() {
  let U;
  try {
    if (U = V && (window.URL || window.webkitURL).createObjectURL(V), !U)
      throw "";
    return new Worker(U);
  } catch {
    return new Worker("data:application/javascript;base64," + J, { type: "module" });
  } finally {
    U && (window.URL || window.webkitURL).revokeObjectURL(U);
  }
}
const R = new d();
let l = 0;
const Q = {};
R.onmessage = function(U) {
  console.log("onmessage", U);
  const F = U.data.id;
  Q[F](U.data.data), delete Q[F];
};
async function S(U) {
  const F = l++;
  return console.log("compress", F), new Promise((B) => {
    Q[F] = B, R.postMessage({ command: "compress", id: F, data: U });
  });
}
async function Z(U) {
  const F = l++;
  return console.log("decompress", F), new Promise((B) => {
    Q[F] = B, R.postMessage({ command: "decompress", id: F, data: U });
  });
}
export {
  S as compress,
  Z as decompress
};
