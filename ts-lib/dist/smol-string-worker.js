const J = "", l = typeof window < "u" && window.Blob && new Blob(["URL.revokeObjectURL(import.meta.url);" + atob(J)], { type: "text/javascript;charset=utf-8" });
function W(Q) {
  let U;
  try {
    if (U = l && (window.URL || window.webkitURL).createObjectURL(l), !U)
      throw "";
    const F = new Worker(U, {
      type: "module",
      name: Q?.name
    });
    return F.addEventListener("error", () => {
      (window.URL || window.webkitURL).revokeObjectURL(U);
    }), F;
  } catch {
    return new Worker(
      "data:application/javascript;base64," + J,
      {
        type: "module",
        name: Q?.name
      }
    );
  }
}
const R = new W();
let d = 0;
const B = {};
R.onmessage = function(Q) {
  const U = Q.data.id;
  B[U](Q.data.data), delete B[U];
};
async function Z(Q) {
  const U = d++;
  return new Promise((F) => {
    B[U] = F, R.postMessage({ command: "compress", id: U, data: Q });
  });
}
async function V(Q) {
  const U = d++;
  return new Promise((F) => {
    B[U] = F, R.postMessage({ command: "decompress", id: U, data: Q });
  });
}
export {
  Z as compress,
  V as decompress
};
