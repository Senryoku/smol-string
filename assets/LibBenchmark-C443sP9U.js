import{_ as h,d as b,r as G,g as X,o as L,c as y,e as w,h as x}from"./index-CaRZ5p0r.js";const i="",O=N=>Uint8Array.from(atob(N),n=>n.charCodeAt(0)),C=typeof window<"u"&&window.Blob&&new Blob(["URL.revokeObjectURL(import.meta.url);",O(i)],{type:"text/javascript;charset=utf-8"});function H(N){let n;try{if(n=C&&(window.URL||window.webkitURL).createObjectURL(C),!n)throw"";const o=new Worker(n,{type:"module",name:N?.name});return o.addEventListener("error",()=>{(window.URL||window.webkitURL).revokeObjectURL(n)}),o}catch{return new Worker("data:text/javascript;base64,"+i,{type:"module",name:N?.name})}}const s=new H;let D=0;const m={};s.onmessage=function(N){const n=N.data.id;m[n](N.data.data),delete m[n]};async function z(N){const n=D++;return new Promise(o=>{m[n]=o,s.postMessage({command:"compress",id:n,data:N})})}async function K(N){const n=D++;return new Promise(o=>{m[n]=o,s.postMessage({command:"decompress",id:n,data:N})})}var I=function(){var N=String.fromCharCode,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",p={};function e(F,Q){if(!p[F]){p[F]={};for(var V=0;V<F.length;V++)p[F][F.charAt(V)]=V}return p[F][Q]}var a={compressToBase64:function(F){if(F==null)return"";var Q=a._compress(F,6,function(V){return n.charAt(V)});switch(Q.length%4){default:case 0:return Q;case 1:return Q+"===";case 2:return Q+"==";case 3:return Q+"="}},decompressFromBase64:function(F){return F==null?"":F==""?null:a._decompress(F.length,32,function(Q){return e(n,F.charAt(Q))})},compressToUTF16:function(F){return F==null?"":a._compress(F,15,function(Q){return N(Q+32)})+" "},decompressFromUTF16:function(F){return F==null?"":F==""?null:a._decompress(F.length,16384,function(Q){return F.charCodeAt(Q)-32})},compressToUint8Array:function(F){for(var Q=a.compress(F),V=new Uint8Array(2*Q.length),B=0,l=Q.length;B<l;B++){var J=Q.charCodeAt(B);V[2*B]=J>>>8,V[2*B+1]=J%256}return V},decompressFromUint8Array:function(F){if(F==null)return a.decompress(F);for(var Q=new Array(F.length/2),V=0,B=Q.length;V<B;V++)Q[V]=256*F[2*V]+F[2*V+1];var l=[];return Q.forEach(function(J){l.push(N(J))}),a.decompress(l.join(""))},compressToEncodedURIComponent:function(F){return F==null?"":a._compress(F,6,function(Q){return o.charAt(Q)})},decompressFromEncodedURIComponent:function(F){return F==null?"":F==""?null:(F=F.replace(/ /g,"+"),a._decompress(F.length,32,function(Q){return e(o,F.charAt(Q))}))},compress:function(F){return a._compress(F,16,function(Q){return N(Q)})},_compress:function(F,Q,V){if(F==null)return"";var B,l,J,S={},E={},d="",k="",Z="",c=2,r=3,W=2,t=[],R=0,U=0;for(J=0;J<F.length;J+=1)if(d=F.charAt(J),Object.prototype.hasOwnProperty.call(S,d)||(S[d]=r++,E[d]=!0),k=Z+d,Object.prototype.hasOwnProperty.call(S,k))Z=k;else{if(Object.prototype.hasOwnProperty.call(E,Z)){if(Z.charCodeAt(0)<256){for(B=0;B<W;B++)R<<=1,U==Q-1?(U=0,t.push(V(R)),R=0):U++;for(l=Z.charCodeAt(0),B=0;B<8;B++)R=R<<1|1&l,U==Q-1?(U=0,t.push(V(R)),R=0):U++,l>>=1}else{for(l=1,B=0;B<W;B++)R=R<<1|l,U==Q-1?(U=0,t.push(V(R)),R=0):U++,l=0;for(l=Z.charCodeAt(0),B=0;B<16;B++)R=R<<1|1&l,U==Q-1?(U=0,t.push(V(R)),R=0):U++,l>>=1}--c==0&&(c=Math.pow(2,W),W++),delete E[Z]}else for(l=S[Z],B=0;B<W;B++)R=R<<1|1&l,U==Q-1?(U=0,t.push(V(R)),R=0):U++,l>>=1;--c==0&&(c=Math.pow(2,W),W++),S[k]=r++,Z=String(d)}if(Z!==""){if(Object.prototype.hasOwnProperty.call(E,Z)){if(Z.charCodeAt(0)<256){for(B=0;B<W;B++)R<<=1,U==Q-1?(U=0,t.push(V(R)),R=0):U++;for(l=Z.charCodeAt(0),B=0;B<8;B++)R=R<<1|1&l,U==Q-1?(U=0,t.push(V(R)),R=0):U++,l>>=1}else{for(l=1,B=0;B<W;B++)R=R<<1|l,U==Q-1?(U=0,t.push(V(R)),R=0):U++,l=0;for(l=Z.charCodeAt(0),B=0;B<16;B++)R=R<<1|1&l,U==Q-1?(U=0,t.push(V(R)),R=0):U++,l>>=1}--c==0&&(c=Math.pow(2,W),W++),delete E[Z]}else for(l=S[Z],B=0;B<W;B++)R=R<<1|1&l,U==Q-1?(U=0,t.push(V(R)),R=0):U++,l>>=1;--c==0&&(c=Math.pow(2,W),W++)}for(l=2,B=0;B<W;B++)R=R<<1|1&l,U==Q-1?(U=0,t.push(V(R)),R=0):U++,l>>=1;for(;;){if(R<<=1,U==Q-1){t.push(V(R));break}U++}return t.join("")},decompress:function(F){return F==null?"":F==""?null:a._decompress(F.length,32768,function(Q){return F.charCodeAt(Q)})},_decompress:function(F,Q,V){var B,l,J,S,E,d,k,Z=[],c=4,r=4,W=3,t="",R=[],U={val:V(0),position:Q,index:1};for(B=0;B<3;B+=1)Z[B]=B;for(J=0,E=Math.pow(2,2),d=1;d!=E;)S=U.val&U.position,U.position>>=1,U.position==0&&(U.position=Q,U.val=V(U.index++)),J|=(S>0?1:0)*d,d<<=1;switch(J){case 0:for(J=0,E=Math.pow(2,8),d=1;d!=E;)S=U.val&U.position,U.position>>=1,U.position==0&&(U.position=Q,U.val=V(U.index++)),J|=(S>0?1:0)*d,d<<=1;k=N(J);break;case 1:for(J=0,E=Math.pow(2,16),d=1;d!=E;)S=U.val&U.position,U.position>>=1,U.position==0&&(U.position=Q,U.val=V(U.index++)),J|=(S>0?1:0)*d,d<<=1;k=N(J);break;case 2:return""}for(Z[3]=k,l=k,R.push(k);;){if(U.index>F)return"";for(J=0,E=Math.pow(2,W),d=1;d!=E;)S=U.val&U.position,U.position>>=1,U.position==0&&(U.position=Q,U.val=V(U.index++)),J|=(S>0?1:0)*d,d<<=1;switch(k=J){case 0:for(J=0,E=Math.pow(2,8),d=1;d!=E;)S=U.val&U.position,U.position>>=1,U.position==0&&(U.position=Q,U.val=V(U.index++)),J|=(S>0?1:0)*d,d<<=1;Z[r++]=N(J),k=r-1,c--;break;case 1:for(J=0,E=Math.pow(2,16),d=1;d!=E;)S=U.val&U.position,U.position>>=1,U.position==0&&(U.position=Q,U.val=V(U.index++)),J|=(S>0?1:0)*d,d<<=1;Z[r++]=N(J),k=r-1,c--;break;case 2:return R.join("")}if(c==0&&(c=Math.pow(2,W),W++),Z[k])t=Z[k];else{if(k!==r)return null;t=l+l.charAt(0)}R.push(t),Z[r++]=l+t.charAt(0),l=t,--c==0&&(c=Math.pow(2,W),W++)}}};return a}();const T=I,u=h(()=>import("./512KB-Cmx0pFrj.js"),[]),Y=h(()=>import("./1MB-DNCdY0QL.js"),[]),M=h(()=>import("./rw_medium-B8IwR0iT.js"),[]),v=h(()=>import("./rw_large-DP7720Ef.js"),[]);JSON.stringify(await u),JSON.stringify(await Y),JSON.stringify(await M),JSON.stringify(await v);const g=b({__name:"LibBenchmark",setup(N){const n=G({compressed:{},decompressed:{},success:{},size:{}});async function o(p,e,a,F,Q){const V=performance.now(),B=await F(a),l=performance.now()-V;localStorage.setItem("compressed",B);const J=localStorage.getItem("compressed");localStorage.removeItem("compressed");const S=performance.now(),E=await Q(J),d=performance.now()-S;n.value.compressed[e]||(n.value.compressed[e]={},n.value.decompressed[e]={},n.value.success[e]={},n.value.size[e]={}),n.value.compressed[e][p]=l,n.value.size[e][p]=100*(B.length/a.length),n.value.decompressed[e][p]=d,n.value.success[e][p]=a===E}return X(async()=>{const p=[{name:"json_512kb",input:JSON.stringify((await u).default)},{name:"json_1mb",input:JSON.stringify((await Y).default)},{name:"json_4mb",input:JSON.stringify((await M).default)},{name:"json_8mb",input:JSON.stringify((await v).default)}];for(const{name:e,input:a}of p)await o("smol-string",e,a,z,K),await o("LZString",e,a,T.compress,T.decompress),await o("LZString UTF-16",e,a,T.compressToUTF16,T.decompressFromUTF16)}),(p,e)=>(L(),y("div",null,[w(x,{results:n.value},null,8,["results"])]))}});export{g as default};
