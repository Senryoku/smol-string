function e(A, C) {
  const I = new TextEncoder().encode(A), g = C.allocUint8(I.length);
  return new Uint8Array(
    C.memory.buffer,
    g,
    I.length
  ).set(I), { ptr: g, length: I.length };
}
function h(A) {
  const C = new Array(A.length);
  for (let I = 0; I < A.length; I++)
    C[I] = String.fromCharCode(A[I]);
  return C.join("");
}
function D(A, C) {
  const I = new Uint32Array(
    A.buffer.slice(C, C + 8)
  ), g = I.at(0), Q = I.at(1);
  return {
    start: C - g,
    end: C,
    capacity: Q
  };
}
var r = async (A = {}, C) => {
  let I;
  if (C.startsWith("data:")) {
    const g = C.replace(/^data:.*?base64,/, "");
    let Q;
    if (typeof Buffer == "function" && typeof Buffer.from == "function")
      Q = Buffer.from(g, "base64");
    else if (typeof atob == "function") {
      const E = atob(g);
      Q = new Uint8Array(E.length);
      for (let i = 0; i < E.length; i++)
        Q[i] = E.charCodeAt(i);
    } else
      throw new Error(
        "Failed to decode base64-encoded data URL, Buffer and atob are not supported"
      );
    I = await WebAssembly.instantiate(Q, A);
  } else {
    const g = await fetch(C), Q = g.headers.get("Content-Type") || "";
    if ("instantiateStreaming" in WebAssembly && Q.startsWith("application/wasm"))
      I = await WebAssembly.instantiateStreaming(g, A);
    else {
      const E = await g.arrayBuffer();
      I = await WebAssembly.instantiate(E, A);
    }
  }
  return I.instance;
}, y = (A) => r(A, "data:application/wasm;base64,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OgAAIAQgDjsBACAOQQFqIQ4MAgtBACEDIAhBACAG/AsAA0AgA0GABEcEQCACQTBqIANqQQE7AQAgA0ECaiEDDAELCyACQbAEakH//z8QBiACQQA2AsgEIAJBCToAzARBgAIhDgwBCwsgAkGwBGogACAPai0AABAGCyANIAogBhAAIA0gDCAGEAEgBgRAIA0pAgAiFacgCCAGQQBBACAVQiCIpygCDBEAAAsLQX8hAyACQbAEaiACKAK0BCIAQQJqEAhB//8DcQ0AIAIoArAEIgQgAigCtARBA3RqIgUgAjUCxAQgAa1CIIaENwMAIAVBCGogAEEDdEEIaiIArSACNQK4BEIjhoQ3AwAgACAEaiEDCyACQYAFaiQAIAMLOQECfyABIAAoAggiAksEfwNAQX8gAkEBdiACakEIaiIDIAIgA0sbIgIgAUkNAAsgACACEAwFQQALC0wCAX8BfiMAQRBrIgMkACAAIAIEfiABKQIAIgSnIAJBAEEAIARCIIinKAIAEQEAIgGtIAFFrUIghoQFQv////8PCzcCACADQRBqJAALUAEBfiACRQRAIABC/P///w83AgAPCyABKQIAIgOnIAJBAkEAIANCIIinKAIAEQEAIgFFBEAgAEKAgICAEDcCAA8LIAAgATYCACAAQQA7AQQLWgEBfyMAQSBrIgMkACADIAEpAgA3AwggAyACQf////8DSzoAHCAAIAJBgICAgARPBH5CgICAgBAFIANBEGogA0EIaiACQQJ0EAogAykDEAs3AgAgA0EgaiQAC+cCAgZ/AX4jAEEQayIFJAACfwJAIAAoAggiBCABTw0AIAAoAgAhBwJ/AkACQCAERQ0AIAAoAhAhBiAAKAIMIAUgAUH/////AUs6AAggAUGAgICAAk8NACAHIARBA3RBAyABQQN0IgJBACAGKAIIEQMAIgZFDQEgBkGq1arVeiACGyEDIAFB/////wFxQQAgAhsMAgsLQQALIQIgAwRAIAAgAzYCACAAIAI2AggMAQsgACkCDCEIIAUgAUH/////AUs6AAwCQCABQYCAgIACTw0AAkAgAUEDdCIDRQRAQXghAwwBCyAIpyADQQNBACAIQiCIpygCABEBACIDRQ0BCyAAKAIEIgIEQCADIAAoAgAgAkEDdPwKAAALIARBA3QiAgRAIAApAgwiCKcgB0Gq1arVeiAE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IgNBACAGQiCIpygCCBEDACICRQRAQQAhAgwCCyACQarVqtV6IAMbIQIgBEH/////A3FBACADGyEBDAELQQAhAkEAIQELIAAgAjYCACAAIAE2AgQgBUEQaiQAC34BAX8jAEEwayIDJAAgAyABKQIANwMIIANBEGogA0EIaiACEAsgAAJ/IAMvARQiAQRAIAMgATsBICADQRhqDAELIANBADsBLCADIAI2AiggAyADKAIQNgIkIANBJGoLIgIpAgA3AgAgAEEIaiACQQhqKAIANgIAIANBMGokAAv2AQIGfwF+IwBBIGsiAyQAAkAgACgCCCIFIAFPDQAgACgCACEGAn8CQCAFBEAgACkCDCIIpyAGIAVBACABQQAgCEIgiKcoAggRAwAiBA0BC0EADAELIAQhAiABCyEEAkAgAgRAIAAgAjYCACAAIAQ2AggMAQsgAyAAQQxqIgQpAgA3AxAgA0EYaiADQRBqIAEQCSADLwEcIgINASADKAIYIQIgACgCBCIHBEAgAiAAKAIAIAf8CgAACyAFBEAgBCkCACIIpyAGIAVBAEEAIAhCIIinKAIMEQAACyAAIAE2AgggACACNgIAC0EAIQILIANBIGokACACCzwBAX8jAEEQayIBJAAgAUHogMAAKQMANwMAIAFBCGogASAAEAkgAS8BDEUEQCABKAIIIAFBEGokAA8LAAtjAgJ/AX4jAEEQayIBJAAgASAAQQBIIgI6AAwCQCACDQACQCAAQQF0IgBFBEBBfiEADAELQeiAwAApAwAiA6cgAEEBQQAgA0IgiKcoAgARAQAiAEUNAQsgAUEQaiQAIAAPCwALKAEBfiABBEBB6IDAACkCACICpyAAIAFBAEEAIAJCIIinKAIMEQAACwvnAQECfyMAQRBrIgMkACADIAJBH3E6AA9BACEAAkBBfyABQQRqIgQgASAESxsiAUEBIAJ0IgIgASACSxsiAUEBa2ciAkUNAAJAQgFBICACa62GpyICaEEDayIEQQ1JBEAgBEECdCIEQfCAwABqIgUoAgAiAUUNASAFIAEgAmpBBGsoAgA2AgAgASEADAILIAFBg4AEakEQdhAWIQAMAQsgBEGkgcAAaiIEKAIAIgFB//8DcUUEQEEBEBYiAUUNASAEIAEgAmo2AgAgASEADAELIAQgASACajYCACABIQALIANBEGokACAAC08BAn9CAUEgIABBAWtna62GpyIAaEECdEHYgcAAaiICKAIAIgEEQCACIABBEHQgAWpBBGsoAgA2AgAgAQ8LIABAACIAQRB0QQAgAEF/RxsLtQEAIwBBEGsiASQAIAEgA0EfcToAD0F/IARBBGoiACAAIARJGyIEQQEgA3QiACAAIARJGyEDIAFBEGokAAJ/AkBCAUEgIAJBBGoiAiAAIAAgAkkbIgBBAWtna62GpyICaEEDa0EMTQRAIANBAWtnIgANAUEADAILQgFBICAAQYOABGpBEHZBAWtna62Gp0IBQSAgA0GDgARqQRB2QQFrZ2uthqdGDAELIAJCAUEgIABrrYanRgsLGAAgAUEAIAQgBCACIAMgBCAEEBdBAXEbC6QBACMAQRBrIgAkACAAIANBH3E6AA8Cf0IBQSAgAkEEaiICQQEgA3QiAyACIANLGyICQQFrZ2uthqciBGhBA2siA0ENSQRAIANBAnRB8IDAAGohAyABIARqQQRrDAELQgFBICACQYOABGpBEHZBAWtna62GpyICaEECdEHYgcAAaiEDIAEgAkEQdGpBBGsLIAMoAgA2AgAgAyABNgIAIABBEGokAAsLdQIAQYCAwAALYwEAAAACAAAAAwAAAAQAAAAAAAAAAQAAAAMAAAAHAAAADwAAAB8AAAA/AAAAfwAAAP8AAAD/AQAA/wMAAP8HAAD/DwAA/x8AAP8/AAD/fwAA//8AAP//AQD//wMA//8HAP//DwBB7oDAAAsBEA==");
const f = await y(), B = f.exports;
function F(A) {
  const { ptr: C, length: I } = e(A, B), g = B.compress(C, I);
  if (B.free(C, I), g < 0) throw new Error("Error compressing string.");
  const { start: Q, end: E, capacity: i } = D(B.memory, g), o = new Uint16Array(B.memory.buffer.slice(Q, E)), t = h(o);
  return B.free(Q, i), t;
}
function G(A) {
  const C = (A.charCodeAt(A.length - 3) << 16) + A.charCodeAt(A.length - 4), I = (A.charCodeAt(A.length - 1) << 16) + A.charCodeAt(A.length - 2), g = A.length - 4;
  let Q = B.allocUint16(g), E = new Uint16Array(
    B.memory.buffer,
    Q,
    g
  );
  for (let a = 0; a < g; a++)
    E[a] = A.charCodeAt(a);
  const i = B.decompress(
    Q,
    g,
    C,
    I
  );
  if (B.free(Q, 2 * g), i < 0) throw new Error("Error decompressing string.");
  const { start: o, end: t, capacity: w } = D(B.memory, i), s = new Uint8Array(B.memory.buffer.slice(o, t)), n = new TextDecoder().decode(s);
  return B.free(o, w), n;
}
self.onmessage = function(A) {
  const { command: C, id: I, data: g } = A.data;
  switch (C) {
    case "decompress": {
      self.postMessage({ id: I, data: G(g) });
      break;
    }
    case "compress": {
      self.postMessage({ id: I, data: F(g) });
      break;
    }
  }
};
