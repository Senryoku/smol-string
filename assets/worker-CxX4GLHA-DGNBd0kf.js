function e(A, C) {
  const I = new TextEncoder().encode(A), g = C.allocUint8(I.length);
  return new Uint8Array(
    C.memory.buffer,
    g,
    I.length
  ).set(I), { ptr: g, length: I.length };
}
function h(A) {
  const C = new Array(A.length);
  for (let I = 0; I < A.length; I++)
    C[I] = String.fromCharCode(A[I]);
  return C.join("");
}
function w(A, C) {
  const I = new Uint32Array(
    A.buffer.slice(C, C + 8)
  ), g = I.at(0), Q = I.at(1);
  return {
    start: C - g,
    end: C,
    capacity: Q
  };
}
var r = async (A = {}, C) => {
  let I;
  if (C.startsWith("data:")) {
    const g = C.replace(/^data:.*?base64,/, "");
    let Q;
    if (typeof Buffer == "function" && typeof Buffer.from == "function")
      Q = Buffer.from(g, "base64");
    else if (typeof atob == "function") {
      const E = atob(g);
      Q = new Uint8Array(E.length);
      for (let i = 0; i < E.length; i++)
        Q[i] = E.charCodeAt(i);
    } else
      throw new Error(
        "Failed to decode base64-encoded data URL, Buffer and atob are not supported"
      );
    I = await WebAssembly.instantiate(Q, A);
  } else {
    const g = await fetch(C), Q = g.headers.get("Content-Type") || "";
    if ("instantiateStreaming" in WebAssembly && Q.startsWith("application/wasm"))
      I = await WebAssembly.instantiateStreaming(g, A);
    else {
      const E = await g.arrayBuffer();
      I = await WebAssembly.instantiate(E, A);
    }
  }
  return I.instance;
}, y = (A) => r(A, "data:application/wasm;base64,");
const f = await y(), B = f.exports;
function F(A) {
  const { ptr: C, length: I } = e(A, B), g = B.compress(C, I);
  if (B.free(C, I), g < 0) throw new Error("Error compressing string.");
  const { start: Q, end: E, capacity: i } = w(B.memory, g), a = new Uint16Array(B.memory.buffer.slice(Q, E)), o = h(a);
  return B.free(Q, i), o;
}
function c(A) {
  const C = (A.charCodeAt(A.length - 3) << 16) + A.charCodeAt(A.length - 4), I = (A.charCodeAt(A.length - 1) << 16) + A.charCodeAt(A.length - 2), g = A.length - 4;
  let Q = B.allocUint16(g), E = new Uint16Array(
    B.memory.buffer,
    Q,
    g
  );
  for (let D = 0; D < g; D++)
    E[D] = A.charCodeAt(D);
  const i = B.decompress(
    Q,
    g,
    C,
    I
  );
  if (B.free(Q, 2 * g), i < 0) throw new Error("Error decompressing string.");
  const { start: a, end: o, capacity: t } = w(B.memory, i), s = new Uint8Array(B.memory.buffer.slice(a, o)), n = new TextDecoder().decode(s);
  return B.free(a, t), n;
}
self.onmessage = function(A) {
  const { command: C, id: I, data: g } = A.data;
  switch (C) {
    case "decompress": {
      self.postMessage({ id: I, data: c(g) });
      break;
    }
    case "compress": {
      self.postMessage({ id: I, data: F(g) });
      break;
    }
  }
};
