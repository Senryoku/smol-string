function e(A, Q) {
  const I = new TextEncoder().encode(A), g = Q.allocUint8(I.length);
  return new Uint8Array(
    Q.memory.buffer,
    g,
    I.length
  ).set(I), { ptr: g, length: I.length };
}
function y(A) {
  const Q = new Array(A.length);
  for (let I = 0; I < A.length; I++)
    Q[I] = String.fromCharCode(A[I]);
  return Q.join("");
}
function t(A, Q) {
  const I = new Uint32Array(
    A.buffer.slice(Q, Q + 8)
  ), g = I.at(0), C = I.at(1);
  return {
    start: Q - g,
    end: Q,
    capacity: C
  };
}
var h = async (A = {}, Q) => {
  let I;
  if (Q.startsWith("data:")) {
    const g = Q.replace(/^data:.*?base64,/, "");
    let C;
    if (typeof Buffer == "function" && typeof Buffer.from == "function")
      C = Buffer.from(g, "base64");
    else if (typeof atob == "function") {
      const E = atob(g);
      C = new Uint8Array(E.length);
      for (let i = 0; i < E.length; i++)
        C[i] = E.charCodeAt(i);
    } else
      throw new Error(
        "Failed to decode base64-encoded data URL, Buffer and atob are not supported"
      );
    I = await WebAssembly.instantiate(C, A);
  } else {
    const g = await fetch(Q), C = g.headers.get("Content-Type") || "";
    if ("instantiateStreaming" in WebAssembly && C.startsWith("application/wasm"))
      I = await WebAssembly.instantiateStreaming(g, A);
    else {
      const E = await g.arrayBuffer();
      I = await WebAssembly.instantiate(E, A);
    }
  }
  return I.instance;
}, r = (A) => h(A, "data:application/wasm;base64,");
const f = await r(), B = f.exports;
function c(A) {
  const { ptr: Q, length: I } = e(A, B), g = B.compress(Q, I);
  if (B.free(Q, I), g < 0) throw new Error("Error compressing string.");
  const { start: C, end: E, capacity: i } = t(B.memory, g), a = new Uint16Array(B.memory.buffer.slice(C, E)), o = y(a);
  return B.free(C, i), o;
}
function F(A) {
  const Q = (A.charCodeAt(A.length - 3) << 16) + A.charCodeAt(A.length - 4), I = (A.charCodeAt(A.length - 1) << 16) + A.charCodeAt(A.length - 2), g = A.length - 4;
  let C = B.allocUint16(g), E = new Uint16Array(
    B.memory.buffer,
    C,
    g
  );
  for (let D = 0; D < g; D++)
    E[D] = A.charCodeAt(D);
  const i = B.decompress(
    C,
    g,
    Q,
    I
  );
  if (B.free(C, 2 * g), i < 0) throw new Error("Error decompressing string.");
  const { start: a, end: o, capacity: w } = t(B.memory, i), n = new Uint8Array(B.memory.buffer.slice(a, o)), s = new TextDecoder().decode(n);
  return B.free(a, w), s;
}
self.onmessage = function(A) {
  const { command: Q, id: I, data: g } = A.data;
  switch (Q) {
    case "decompress": {
      self.postMessage({ id: I, data: F(g) });
      break;
    }
    case "compress": {
      self.postMessage({ id: I, data: c(g) });
      break;
    }
  }
};
